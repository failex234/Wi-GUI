#!/bin/sh

config=$HOME/.config/wigui.conf



#It's not recommended to change these \/ \/
n1enabled="true"
n2enabled="true"
debug="false"
RED='\033[0;31m'
GREEN='\033[0;32m'
RESET='\033[0m'

hash wpa_supplicant 2>/dev/null || { echo >&2 "wpa_supplicant not found! Maybe it's not installed or not in your PATH."; exit 1; }
hash dhcpcd 2>/dev/null || { echo >&2 "dhcpcd not found! Maybe it's not installed or not in your PATH."; exit 1; }
hash sudo 2>/dev/null || { echo >&2 "sudo not found! In the future you'll don't need sudo but for now you do!."; exit 1; }
if [ -f $HOME/.config/wigui.conf ]; then 
	source $HOME/.config/wigui.conf
	if [[ ( "$network1" == "CHANGEME" && "$network2" == "CHANGEME" ) ]]; then
		echo "Please set at least one network name in your config!"
	       	exit 1	
	fi

	if [ "$network1" == "CHANGEME" ]; then
		n1enabled="false"
	elif [ "$network2" == "CHANGEME" ]; then
		n2enabled="false"
	fi	
else
	echo "network1='CHANGEME'" > $config
	echo "network2='CHANGEME'" >> $config
	echo "interface='eth0'" >> $config
	clear
	echo "Before you first use Wi-GUI you have to change "
	echo "the config to your needs. "
	echo "The config is located in ${HOME}/.config/wigui.conf"
	exit 1
fi

if [ "$@" == "--help" ]; then
	echo "------------------Wi-GUI Help--------------------"
	echo "Easy GUI to connect to predefined or custom net- "
	echo "works. Uses wpa_supplicant and dhcpcd. "
	echo ""
	echo "Usage: wigui <args>"
	echo ""
	echo "Possible arguments:"
	echo ""
	echo "--help    - Shows this help menu."
	echo "--version - Output program version number."
	echo "--status  - Runtime Status of dhcpcd and"
	echo "            wpa_supplicant."
	echo "--kill    - Just kill dhcpcd and wpa_supplicant"
	echo "            without actually opening the GUI.  "
	echo "-------------------------------------------------"
	exit 1
fi

if [ "$@" == "--kill" ]; then
pgrep dhcpcd > /dev/null && dhcpcd="true"
pgrep wpa_supplicant > /dev/null && wpa="true"
	if [[ ( "$dhcpcd" == "true" || "$wpa" == "true" ) ]]; then
 		CAN_I_RUN_SUDO=$(sudo -n uptime 2>&1|grep "load"|wc -l)
		if [ ${CAN_I_RUN_SUDO} -gt 0 ]; then
			echo "Killing dhcpcd and wpa_supplicant..."
			sudo kill 9 dhcpcd
			sudo kill 9 wpa_supplicant
			exit 1
		else
			echo "You need to authenticate to kill dhcpcd and wpa_supplicant"
			sudo kill 9 dhcpcd
			sudo kill 9 wpa_supplicant
			exit 1
		fi
	else
		echo "dhcpcd and wpa_supplicant are not running..."
		exit 1
	fi
	
fi

if [ "$@" == "--version" ]; then
	echo "Wi-GUI Version 1.5"
	echo "Copyright (c) 2017 by Felix Naumann"
	echo "This product is free under the GNU General Public License 3"
	echo "Git Repo: https://github.com/failex234/Wi-GUI "
	exit 1
fi

if [ "$@" == "--debug" ]; then
	debug=true
fi

if [ "$@" == "--status" ]; then
dhcpcd="false"
wpa="false"
pgrep dhcpcd > /dev/null && dhcpcd="true"
pgrep wpa_supplicant > /dev/null && wpa="true"

if [[ ( "$dhcpcd" == "true" && "$wpa" == "true" ) ]]; then
	echo -e "dhcpcd: ${GREEN}running${RESET}, wpa_supplicant: ${GREEN}running${RESET}"
elif [[ ( "$dhcpcd" == "true" && "$wpa" == "false" ) ]]; then
	echo -e "dhcpcd: ${GREEN}running${RESET}, wpa_supplicant: ${RED}stopped${RESET}"
elif [[ ( "$dhcpcd" == "false" && "$wpa" == "true" ) ]]; then
	echo -e "dhcpcd: ${RED}stopped${RESET}, wpa_supplicant: ${GREEN}running${RESET}"
else
	echo -e "dhcpcd: ${RED}stopped${RESET}, wpa_supplicant: ${RED}stopped${RESET}"
fi
exit 1
fi	

clear

echo "|-----------------------------------"
echo "|                                   "
if [ ! "$n1enabled" == "false" ]; then
echo "| 1. $network1"  
fi
if [ ! "$n2enabled" == "false" ]; then
echo "| 2. $network2"             
fi
echo "| 3. Custom Profile                 "
echo "|                                   "
echo "|-----------------------------------"
echo "| Current interface: $interface"
echo "|-----------------------------------"
echo ""
echo -n "Please choose a profile: "
read number

if [[ ( "$number" == "1" && "$n1enabled" == "false" ) ]]; then
	echo "Network is disabled because the name hasn't been changed yet"
	exit 1
elif [[ ( "$number" == "2" && "$n2enabled" == "false" ) ]]; then
	echo "Network is disabled because the name hasn't been changed yet"
	exit 1
fi
pgrep dhcpcd > /dev/null && dhcpcd="true" 
pgrep wpa_supplicant > /dev/null && wpa="true"

if [[ ( "$number" == "1" || "$number" == "2" || "$number" == "3" ) ]]; then
if [ "$dhcpcd" == "true" ]; then
	echo -n "dhcpcd is already running, to continue dhcpcd needs to be killed. Are you sure? [y/n] "
	read choice
	CAN_I_RUN_SUDO=$(sudo -n uptime 2>&1|grep "load"|wc -l)
	if [ "$choice" == "y" ]; then
		if [ ${CAN_I_RUN_SUDO} -gt 0 ]; then
			echo "Killing dhcpcd..."
			sudo kill 9 dhcpcd
		else
			echo "You need to authenticate to kill dhcpcd..."
			sudo kill 9 dhcpcd
		fi
	elif [ "$choice" == "n" ]; then
		echo "Sorry, but you can't continue!"
		exit 1
	else
		echo "Unexpected input. exiting..."
		exit 1
	fi

fi

if [ "$wpa" == "true" ]; then
	echo -n "wpa_supplicant is already, to continue wpa_supplicant needs to be killed. Are you sure? [y/n] "
	read choice
	CAN_I_RUN_SUDO=$(sudo -n uptime 2>&1|grep "load"|wc -l)
	if [ "$choice" == "y" ]; then
		if [ ${CAN_I_RUN_SUDO} -gt 0 ]; then
			echo "Killing wpa_supplicant..."
			sudo kill 9 wpa_supplicant
		else
			echo "You need to authenticate to kill wpa_supplicant..."
			sudo kill 9 wpa_supplicant
		fi
	elif [ "$choice" == "n" ]; then
		echo "Sorry, but you can't continue!"
		exit 1
	else
		echo "Unexpected input. exiting..."
		exit 1
	fi
fi
fi
if [ "$number" == "1" ]; then
	echo ""
	echo -n "Please enter the password for ${network1}: "
	read password
	if [ "$UID" == "0" ]; then
		echo "Initializing connection to ${network1}..."
		if [ $debug == true ]; then		
		wpa_passphrase "$network1" "$password" > pwtemp.conf
		wpa_supplicant -B -i $interface -c pwtemp.conf
	else
		wpa_passphrase "$network1" "$password" > pwtemp.conf
		wpa_supplicant -B -i $interface -c pwtemp.conf 2&> /dev/null
	fi
		rm pwtemp.conf
		
		echo "Connecting to ${network1}..."
	if [ $debug == true ]; then	
		dhcpcd $interface
	else
		dhcpcd $interface 2&> /dev/null
	fi
		echo "Successfully connected! Good bye!"
		exit 1
	else
		SUDO=$(sudo -n uptime 2>&1|grep "load"|wc -l)
		if [ $SUDO -gt 0 ]; then
			echo "Already root..."
		else
		echo "____________________________________________________"
		echo "Please Authenticate to connect to ${network1}..."
		echo "____________________________________________________"
		echo ""
		fi

		if [ $debug == "true" ]; then
		wpa_passphrase "$network1" "$password" > pwtemp.conf 
		sudo wpa_supplicant -B -i $interface -c pwtemp.conf
		else
		wpa_passphrase "$network1" "$password" > pwtemp.conf 
		sudo wpa_supplicant -B -i $interface -c pwtemp.conf 2&> /dev/null
		fi

		rm pwtemp.conf
		echo "Connecting to ${network1}..."
		if [ $debug == "true" ]; then
		sudo dhcpcd $interface
		else
		sudo dhcpcd $interface 2&> /dev/null
		fi

		echo "Successfully connected! Good bye!"
		exit 1
	fi
elif [ "$number" == "2" ]; then
	echo ""
	echo -n "Please enter the password for ${network2}: "
	read password
	if [ "$UID" == "0" ]; then
		echo "Initializing connection to ${network2}..."
		
		if [ $debug == "true" ]; then
		wpa_passphrase "$network2" "$password" > pwtemp.conf
		wpa_supplicant -B -i $interface -c pwtemp.conf
		else
		wpa_passphrase "$network2" "$password" > pwtemp.conf
		wpa_supplicant -B -i $interface -c pwtemp.conf 2&> /dev/null
		fi
		
		rm pwtemp.conf
		
		echo "Connecting to ${network2}..."
		
		if [ $debug == "true" ]; then
		dhcpcd $interface
		else
		dhcpcd $interface 2&> /dev/null
		fi
		
		echo "Successfully connected! Good bye!"
		exit 1
	else
		SUDO=$(sudo -n uptime 2>&1|grep "load"|wc -l)
		if [ $SUDO -gt 0 ]; then
			echo "Already authenticated as sudo..."
		else
		echo "____________________________________________________"
		echo "Please Authenticate to connect to ${network2}..."
		echo "____________________________________________________"
		echo ""
		fi
	fi
		if [ $debug == "true" ]; then
		wpa_passphrase "$network2" "$password" > pwtemp.conf 
		sudo wpa_supplicant -B -i $interface -c pwtemp.conf
		else
		wpa_passphrase "$network2" "$password" > pwtemp.conf 
		sudo wpa_supplicant -B -i $interface -c pwtemp.conf 2&> /dev/null
fi
		rm pwtemp.conf
		echo "Connecting to ${network2}..."
		sudo dhcpcd $interface 2&> /dev/null
		echo "Successfully connected! Good bye!"
		exit 1
elif [ "$number" == "3" ]; then
	echo -n "Please input the network you want to connect to: "
	read network
	echo ""
	echo -n "Please enter the password for ${network}: "
	read password
	if [ "$UID" == "0" ]; then
		echo "Initializing connection to ${network}..."
		
		wpa_passphrase "$network" "$password" > pwtemp.conf
		wpa_supplicant -B -i $interface -c pwtemp.conf 2&> /dev/null
		
		rm pwtemp.conf
		
		echo "Connecting to ${network}..."
		
		dhcpcd $interface 2&> /dev/null
		
		echo "Successfully connected! Good bye!"
		exit 1
	else
		SUDO=$(sudo -n uptime 2>&1|grep "load"|wc -l)
		if [ $SUDO -gt 0 ]; then
			echo "Already authenticated as sudo..."
		else
		echo "____________________________________________________"
		echo "Please Authenticate to connect to ${network}..."
		echo "____________________________________________________"
		echo ""
	fi
		wpa_passphrase "$network" "$password" > pwtemp.conf 
		sudo wpa_supplicant -B -i $interface -c pwtemp.conf 2&> /dev/null
		rm pwtemp.conf
		echo "Connecting to ${network}..."
		sudo dhcpcd $interface 2&> /dev/null
		echo "Successfully connected! Good bye!"
		exit 1
	exit 3
fi
else
	#Maybe it would be better to start over instead of exiting...
	echo "Unexpected input. exiting..."
	exit -1
fi	


